package generated.fr.ul.miage.ahvr.projetCompilationComplet;
import fr.ul.miage.arbre.*;
import TDS.*;
import java.util.ArrayList;

// code java
parser code {:
    public Noeud resultat = null;
    public TDS tds = new TDS();
    private Scope currentScope = new Scope(null);
    private Item main = new Item("main", Type.VOID, CategorieTDS.FONCTION, currentScope, null, null, 0,0);
    private Fonction currentFonction = new Fonction(main);
    private int numSi = 0;
    private int numTantque = 0;
:}

terminal String IDF;
terminal SI, SINON, ECRIRE, TANTQUE, RETOUR, INT, FONCTION, LIRE;
terminal Integer NUM;
terminal ADD, SUB, MUL, DIV, PO, PF, SUP, INF, SEQ, IEQ, EQ, DIF, AO, AF, PV, VIR, AFF;
//        +   -    *    /    (   )   >    <    >=   <=   ==  !=   {   }   ;   ,    =

non terminal Noeud expression, facteur, atome,
expressionBooleene,
blocInstruction, blocDeclaration,
conditionnelle,
affectation,
ecrire,
tantque,
retour,
appel,
parametre, parametre2,
instruction,
fonction,
lire,
programme, programme2,
defParam, defParam2, defIdf, declaration;
start with programme;

expression ::= expression:e ADD facteur:f {:
      RESULT = new Plus();
      ((Plus)RESULT).setFilsGauche(e);
      ((Plus)RESULT).setFilsDroit(f);
  :}
    | expression:e SUB facteur:f {:
     RESULT = new Moins();
        ((Moins)RESULT).setFilsGauche(e);
        ((Moins)RESULT).setFilsDroit(f);
    :}
    | facteur:f {:
        RESULT = f;
    :}
    ;
facteur ::= facteur:f MUL atome:a {:
              RESULT = new Multiplication();
              ((Multiplication)RESULT).setFilsGauche(f);
              ((Multiplication)RESULT).setFilsDroit(a);
          :}
    | facteur:f DIV atome:a {:
        RESULT = new Division();
        ((Division)RESULT).setFilsGauche(f);
        ((Division)RESULT).setFilsDroit(a);
    :}
    | atome:a {:
      RESULT = a;
    :}
    ;
atome ::= NUM:n {:
      RESULT = new Const(n);
  :}
    | PO expression:e PF {:
         RESULT = e;
     :}
    | IDF:i {:
        Item item = tds.recupererItem(new CleTDS(i ,currentScope));
        RESULT = new Idf(item);
                :}
    | lire:l {:
         RESULT = l;
     :}
    | appel:a {:
          RESULT = a;
    :}
    ;

expressionBooleene ::= expression:eg SUP expression:ed {:
        RESULT = new Superieur();
        ((Superieur)RESULT).setFilsGauche(eg);
        ((Superieur)RESULT).setFilsDroit(ed);
    :}
    | expression:eg INF expression:ed {:
        RESULT = new Inferieur();
        ((Inferieur)RESULT).setFilsGauche(eg);
        ((Inferieur)RESULT).setFilsDroit(ed);
    :}
    | expression:eg SEQ expression:ed {:
        RESULT = new SuperieurEgal();
        ((SuperieurEgal)RESULT).setFilsGauche(eg);
        ((SuperieurEgal)RESULT).setFilsDroit(ed);
    :}
    | expression:eg IEQ expression:ed {:
        RESULT = new InferieurEgal();
        ((InferieurEgal)RESULT).setFilsGauche(eg);
        ((InferieurEgal)RESULT).setFilsDroit(ed);
    :}
    | expression:eg EQ expression:ed {:
        RESULT = new Egal();
        ((Egal)RESULT).setFilsGauche(eg);
        ((Egal)RESULT).setFilsDroit(ed);
    :}
    | expression:eg DIF expression:ed {:
        RESULT = new Different();
        ((Different)RESULT).setFilsGauche(eg);
        ((Different)RESULT).setFilsDroit(ed);
    :}
    ;

blocInstruction ::= instruction:i blocInstruction:bi {:
    RESULT = new Bloc();
    ((Bloc)RESULT).ajouterUnFils(i);
    ((Bloc)RESULT).ajouterDesFils(((Bloc)bi).getFils());
:}
    | // vide
     {: RESULT = null; :}
    ;

blocDeclaration ::= declaration:d blocDeclaration:bd {:
    RESULT = new Bloc();
    ((Bloc)RESULT).ajouterUnFils(d);
    ((Bloc)RESULT).ajouterDesFils(((Bloc)bd).getFils());
:}
    | // vide
    {: RESULT= null; :}
    ;

conditionnelle ::= SI PO expressionBooleene:eb PF AO blocInstruction:bsi AF
                    SINON AO blocInstruction:bsinon AF {:
    RESULT = new Si(numSi++);
    ((Si) RESULT).setCondition(eb);
    ((Si) RESULT).setBlocAlors((Bloc)bsi);
    ((Si) RESULT).setBlocSinon((Bloc)bsinon);
                    :}
    ;

affectation ::= IDF AFF expression:e PV
    ;

ecrire ::= ECRIRE PO expression:e PF PV {:
        RESULT = new Ecrire();
        ((Ecrire)RESULT).setLeFils(e);
    :}
    ;

tantque ::= TANTQUE PO expressionBooleene:eb PF AO blocInstruction:b AF {:
        RESULT = new TantQue(numTantque++);
        ((TantQue)RESULT).setCondition(eb);
        ((TantQue)RESULT).setBloc((Bloc)b);
    :}
    ;

retour ::= RETOUR expression:e PV {:
        RESULT = new Retour(currentFonction);
        ((Retour)RESULT).setLeFils(e);
    :}
    | RETOUR PV {:
        RESULT = new Retour(currentFonction);
    :}
    ;

appel ::= IDF PO parametre:p PF PV {:
        RESULT = new Appel(currentFonction);
        ((Appel)RESULT).ajouterDesFils(((Bloc)p).getFils());
    :}
    ;

parametre ::= parametre2:p {:
    RESULT = p;
:}
    | //vide
    ;
parametre2 ::= expression:e {:
    RESULT = new Bloc();
    ((Bloc)RESULT).ajouterUnFils(e);
:}
    | expression:e VIR parametre2:p {:
    RESULT = new Bloc();
    ((Bloc)RESULT).ajouterUnFils(e);
    ((Bloc)RESULT).ajouterDesFils(((Bloc)p).getFils());
:}
    ;

instruction ::= affectation:a {: RESULT = a; :}
    | appel:a {: RESULT = a; :}
    | ecrire:e {: RESULT = e; :}
    | conditionnelle:s {: RESULT = s; :}
    | tantque:t {: RESULT = t; :}
    | retour:r {: RESULT = r; :}
    ;

fonction ::= FONCTION IDF:i PO defParam:d PF AO blocDeclaration:bd blocInstruction:bi AF {:
    Item fonction = new Item(i,Type.VOID,CategorieTDS.FONCTION,scopeGlobale,null,null,0,0);
    currentScope = new Scope(fonction);
    fonction.setNbParam(((Bloc)d).getFils().size());
    RESULT = new Fonction(fonction);
    ((Fonction)RESULT).ajouterDesFils(bd);
    ((Fonction)RESULT).ajouterDesFils(bi);
    currentFonction = RESULT;
:}
    ;

lire ::= LIRE {:
        RESULT = new Lire();
    :}
    ;

programme ::= blocDeclaration:bd programme2:p
    ;
programme2 ::= fonction:f programme2:p
    | fonction:f {:
        RESULT = f;
    :}
    ;

defParam ::= defParam2:p
    | //vide
    ;
defParam2 ::= defIdf:i VIR defParam2:p
    | defIdf:i {:
        RESULT = i;
    :}
    ;
defIdf ::= INT IDF:i {:
        //TODO ne traite pas les variables local
        Item item = new Item(i, Type.INT, CategorieTDS.GLOBAL, currentScope, null, null, null, null);
        tds.ajouterItem(item);
    :}
    ;
declaration ::= defIdf:i PV 
    | defIdf:i AFF NUM PV
    ;